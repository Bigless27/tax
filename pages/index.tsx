import { Grid, Button } from '@mui/material'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Sidebar from '../components/Sidebar';
import SearchBar from '../components/Search';
import React, { useEffect, useState } from 'react';
import { IProject } from '../models/IProjects';
import apiService from '../services/apiservice';
import Projects from '../components/Projects';
import Expenses from '../components/Expenses';
import Create from '../components/Create';
import ProjectHeader from '../components/ProjectHeader';
import ExpenseHeader from '../components/ExpenseHeader';

export default function Home() {
  const [projects, setProjects] = useState<IProject[] | null>(null);
  const [filteredProjects, setFilteredProjects] = useState<IProject[] | null>(null);
  const [currentState, setCurrentState] = useState<"projects" | "expenses">("projects");
  const [currentProjectId, setCurrentProjectId] = useState<number>(1);
  const [editMode, setEditMode] = useState(false);
  const [createMode, setCreateMode] = useState(false);

  const getData = async () => {
    let data = await apiService.getProjects();
    setProjects(data);
    setFilteredProjects(data);
  }

  useEffect(() => {
    getData();
  }, [])

  const onProjectClicked = (id: number) => {
    setCurrentState("expenses");
    setCurrentProjectId(id);
  }

  const onSearch = ({ target: { value } }: any) => {
    let filteredProjects = projects!.filter((data) => {
      return ~data.project.indexOf(value)
    })
    setFilteredProjects(filteredProjects)
  }

  const onRefresh = () => {
    setCreateMode(false);
    getData();
  }

  const getExpenses = (id?: number) => {
    if (id === undefined) {
      id = currentProjectId
    }
    if (projects) {
      let idx = projects?.findIndex((proj) => proj.id === id);
      if (idx === undefined) idx = 0;
      return projects[idx].expenses;
    } else {
      return []
    }
  }

  const handleProjectIdChangeExpenses = (id: number) => {
    setCurrentProjectId(id);
    getExpenses(id);
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {
        projects &&
        (
          <Grid container direction='row'>
            <Grid width="30%">
              <Sidebar currentState={currentState} setState={setCurrentState} />
            </Grid>

            <Grid width="70%" className={styles.body}>
              <Grid padding={'10px 0rem'} direction={"column"} container justifyContent={"center"} alignItems={"center"}>
                {
                  currentState === "projects" ? (
                    <ProjectHeader createMode={createMode} editMode={editMode} onRefresh={onRefresh} onSearch={onSearch} setCreateMode={setCreateMode} setEditMode={setEditMode} />
                  ) : (
                    <ExpenseHeader currrentProjectId={currentProjectId} projects={projects} setCurrentProjectId={handleProjectIdChangeExpenses} />
                  )
                }
              </Grid>
              {
                currentState === "projects" ? (
                  <Projects onRefresh={onRefresh} isEditMode={editMode} projects={filteredProjects!} projectClicked={onProjectClicked} />
                ) : (
                  <Expenses currentProjectId={currentProjectId} expenses={getExpenses()} />
                )
              }
            </Grid>
          </Grid>
        )
      }

    </div >
  )
}